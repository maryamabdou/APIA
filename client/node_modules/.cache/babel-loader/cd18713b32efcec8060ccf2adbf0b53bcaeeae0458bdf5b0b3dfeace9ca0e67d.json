{"ast":null,"code":"var _jsxFileName = \"/home/maryam/Documents/GitHub/graduation_project/src/pages/Interview/SpeechReader.jsx\",\n  _s = $RefreshSig$();\n// Create a new file named `SpeechReader.js` inside the `src` directory\nimport React, { useState } from 'react';\nimport { useSpeechSynthesis } from 'react-speech-kit';\nimport question from './questions.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechReader = () => {\n  _s();\n  const [textToSpeak, setTextToSpeak] = useState('');\n  const [dataset, setDataset] = useState([]);\n\n  //   const handleTextChange = (event) => {\n  //     setTextToSpeak(event.target.value);\n  //   };\n\n  const handleSpeakClick = data => {\n    const utterance = new SpeechSynthesisUtterance();\n    utterance.text = data;\n    utterance.voice = window.speechSynthesis.getVoices()[0]; // Select the desired voice\n    utterance.rate = 1.0; // Adjust speech rate\n    speechSynthesis.speak(utterance);\n  };\n\n  //   const fetchDataset = async () => {\n  //     const response = await fetch('https://github.com/jdorfman/awesome-json-datasets');\n  //     // response = await fetch('questions.json');\n  //     const data = await response.json();\n  //     setDataset(data);\n  //     //.log(data);\n\n  //   };\n\n  async function delay_time() {\n    // await delay(5000);\n    console.log(\"This message will be logged after 3 seconds\");\n  }\n  const handleReadFromDataset = () => {\n    //fetchDataset();\n    question.map(q => {\n      for (let i = 0; i < 3; i++) {\n        // console.log(q.result[i].question);\n        setTextToSpeak(q.result[i].question);\n        var data = q.result[i].question;\n        console.log(data);\n        handleSpeakClick(data);\n        //delay_time();\n      }\n    });\n    //  .catch(error => console.log('error'))\n    // const selectedText = dataset[Math.floor(Math.random() * dataset.length)].text;\n    // const selectedText = dataset;\n    // console.log(selectedText);\n    // setTextToSpeak(selectedText);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReadFromDataset,\n      children: \"Read from Dataset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechReader, \"yNOM8buD/2Uen07sMFuMptXLZdI=\");\n_c = SpeechReader;\nexport default SpeechReader;\nvar _c;\n$RefreshReg$(_c, \"SpeechReader\");","map":{"version":3,"names":["React","useState","useSpeechSynthesis","question","jsxDEV","_jsxDEV","SpeechReader","_s","textToSpeak","setTextToSpeak","dataset","setDataset","handleSpeakClick","data","utterance","SpeechSynthesisUtterance","text","voice","window","speechSynthesis","getVoices","rate","speak","delay_time","console","log","handleReadFromDataset","map","q","i","result","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/maryam/Documents/GitHub/graduation_project/src/pages/Interview/SpeechReader.jsx"],"sourcesContent":["// Create a new file named `SpeechReader.js` inside the `src` directory\r\nimport React, { useState } from 'react';\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\nimport question from './questions.json';\r\n\r\nconst SpeechReader = () => {\r\n  const [textToSpeak, setTextToSpeak] = useState('');\r\n  const [dataset, setDataset] = useState([]);\r\n\r\n//   const handleTextChange = (event) => {\r\n//     setTextToSpeak(event.target.value);\r\n//   };\r\n\r\n  const handleSpeakClick = (data) => {\r\n    const utterance = new SpeechSynthesisUtterance();\r\n    utterance.text = data;\r\n    utterance.voice = window.speechSynthesis.getVoices()[0]; // Select the desired voice\r\n    utterance.rate = 1.0; // Adjust speech rate\r\n    speechSynthesis.speak(utterance);\r\n  };\r\n\r\n//   const fetchDataset = async () => {\r\n//     const response = await fetch('https://github.com/jdorfman/awesome-json-datasets');\r\n//     // response = await fetch('questions.json');\r\n//     const data = await response.json();\r\n//     setDataset(data);\r\n//     //.log(data);\r\n\r\n//   };\r\n\r\nasync function delay_time() {\r\n    // await delay(5000);\r\n    console.log(\"This message will be logged after 3 seconds\");\r\n  }\r\n\r\n  const handleReadFromDataset = () => {\r\n     //fetchDataset();\r\n    question.map(q => {\r\n        for(let i=0; i<3; i++){\r\n            // console.log(q.result[i].question);\r\n            setTextToSpeak(q.result[i].question);\r\n            var data = q.result[i].question;\r\n            console.log(data);\r\n            handleSpeakClick(data);\r\n            //delay_time();\r\n        }\r\n       \r\n    })\r\n    //  .catch(error => console.log('error'))\r\n    // const selectedText = dataset[Math.floor(Math.random() * dataset.length)].text;\r\n   // const selectedText = dataset;\r\n   // console.log(selectedText);\r\n   // setTextToSpeak(selectedText);\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <input type=\"text\" value={textToSpeak} onChange={handleTextChange} />\r\n      <button onClick={handleSpeakClick}>Speak</button> */}\r\n      <button onClick={handleReadFromDataset}>Read from Dataset</button>\r\n      {/* <ul>\r\n        {dataset.map((item) => (\r\n          <li key={item.id}>{item.text}</li>\r\n        ))}\r\n      </ul> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechReader;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,OAAOC,QAAQ,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA;;EAEE,MAAMW,gBAAgB,GAAIC,IAAI,IAAK;IACjC,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAAC,CAAC;IAChDD,SAAS,CAACE,IAAI,GAAGH,IAAI;IACrBC,SAAS,CAACG,KAAK,GAAGC,MAAM,CAACC,eAAe,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzDN,SAAS,CAACO,IAAI,GAAG,GAAG,CAAC,CAAC;IACtBF,eAAe,CAACG,KAAK,CAACR,SAAS,CAAC;EAClC,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,eAAeS,UAAUA,CAAA,EAAG;IACxB;IACAC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;EAC5D;EAEA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IACjC;IACDvB,QAAQ,CAACwB,GAAG,CAACC,CAAC,IAAI;MACd,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;QAClB;QACApB,cAAc,CAACmB,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAC1B,QAAQ,CAAC;QACpC,IAAIU,IAAI,GAAGe,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAC1B,QAAQ;QAC/BqB,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;QACjBD,gBAAgB,CAACC,IAAI,CAAC;QACtB;MACJ;IAEJ,CAAC,CAAC;IACF;IACA;IACD;IACA;IACA;EAED,CAAC;;EAED,oBACER,OAAA;IAAA0B,QAAA,eAGE1B,OAAA;MAAQ2B,OAAO,EAAEN,qBAAsB;MAAAK,QAAA,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAM/D,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA/DID,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAiElB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}